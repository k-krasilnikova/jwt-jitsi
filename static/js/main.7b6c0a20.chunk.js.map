{"version":3,"sources":["constants.js","common/PrivateRoute/index.js","modules/jitsi/components/styles.js","modules/jitsi/components/index.js","modules/jitsi/index.js","modules/jitsi/containers/JitsiContainer.js","modules/login/components/styles.js","modules/login/components/index.js","helpers/history.js","modules/login/index.js","modules/login/containers/LoginContainer.js","modules/router/components/styles.js","modules/router/components/index.js","modules/router/index.js","modules/router/containers/RouterContainer.js","App.js","serviceWorker.js","index.js"],"names":["ROUTES","JITSI_ROOM","PrivateRoute","currentUser","PrivateComponent","component","to","pathname","styles","wrapper","display","flexDirection","button","cursor","withStyles","classes","call","room","name","password","handleClick","className","roomName","userName","loadingComponent","onClick","Jitsi","useState","setCall","event","preventDefault","width","field","margin","alignItems","color","fontSize","label","input","height","borderRadius","initialValues","validationSchema","login","error","onSubmit","errors","status","isSubmitting","htmlFor","type","classNames","disabled","history","createBrowserHistory","Login","setUser","setError","useEffect","push","Yup","shape","username","required","setSubmitting","padding","link","logout","exact","path","HomePage","Router","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7b6c0a20.chunk.js","sourcesContent":["export const ROUTES = {\n  login: \"/login\",\n  home: \"/\",\n};\n\nexport const API_URL = \"/api/values\";\n\nexport const JITSI_ROOM = {\n  room: \"testt\",\n  name: \"trtrtr\",\n  password: \"pas\",\n};\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nimport { ROUTES } from \"../../constants\";\n\nconst PrivateRoute = ({ currentUser, component }) => {\n  const PrivateComponent = component;\n  return (\n    <div>\n      {!currentUser ? (\n        <Redirect to={{ pathname: ROUTES.login }} />\n      ) : (\n        <Route\n          component={() => <PrivateComponent currentUser={currentUser} />}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default PrivateRoute;\n","const styles = () => ({\n  wrapper: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  button: {\n    cursor: \"pointer\",\n  },\n});\n\nexport default styles;\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Jutsu } from \"react-jutsu\";\n\nimport styles from \"./styles\";\n\nconst Jitsi = ({ classes, call, room, name, password, handleClick }) => {\n  return (\n    <div className={classes.wrapper}>\n      <h2>Jitsi Page</h2>\n      {call ? (\n        <Jutsu\n          roomName={room}\n          userName={name}\n          password={password}\n          loadingComponent={<p>loading ...</p>}\n        />\n      ) : (\n        <button onClick={handleClick} className={classes.button}>\n          Start / Join\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default withStyles(styles)(Jitsi);\n","import Jitsi from \"./containers/JitsiContainer\";\n\nexport default Jitsi;\n","import React, { useState } from \"react\";\n\nimport Jitsi from \"../components\";\nimport { JITSI_ROOM } from \"../../../constants\";\n\nconst JitsiContainer = () => {\n  const [call, setCall] = useState(false);\n\n  const handleClick = (event) => {\n    event.preventDefault();\n    if (JITSI_ROOM.room && JITSI_ROOM.name) setCall(true);\n  };\n\n  return (\n    <Jitsi\n      call={call}\n      room={JITSI_ROOM.room}\n      name={JITSI_ROOM.name}\n      password={JITSI_ROOM.password}\n      handleClick={handleClick}\n    />\n  );\n};\n\nexport default JitsiContainer;\n","const styles = () => ({\n  wrapper: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  button: {\n    width: 108,\n    cursor: \"pointer\",\n  },\n  field: {\n    margin: 20,\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"baseline\",\n    \"&>div\": {\n      color: \"red\",\n      fontSize: 12,\n    },\n  },\n  label: {\n    fontSize: 14,\n    color: \"darkgray\",\n  },\n  input: {\n    width: 200,\n    height: 20,\n    borderRadius: 10,\n  },\n});\n\nexport default styles;\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport classNames from \"classnames\";\n\nimport styles from \"./styles\";\n\nconst Login = ({ classes, initialValues, validationSchema, login, error }) => {\n  return (\n    <div className={classes.wrapper}>\n      <h2>Log In Page</h2>\n      {error && <div className={classes.error}>{error}</div>}\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={login}\n      >\n        {({ errors, status, isSubmitting }) => (\n          <Form>\n            <div className={classes.field}>\n              <label htmlFor=\"username\" className={classes.label}>\n                Username\n              </label>\n              <Field\n                name=\"username\"\n                type=\"text\"\n                className={classNames(classes.input, {\n                  [classes.error]: errors,\n                })}\n              />\n              <ErrorMessage name=\"username\" component=\"div\" />\n            </div>\n            <div className={classes.field}>\n              <label htmlFor=\"password\" className={classes.label}>\n                Password\n              </label>\n              <Field\n                name=\"password\"\n                type=\"password\"\n                className={classNames(classes.input, {\n                  [classes.error]: errors,\n                })}\n              />\n              <ErrorMessage name=\"password\" component=\"div\" />\n            </div>\n            <div>\n              <button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className={classes.button}\n              >\n                Get JWT\n              </button>\n            </div>\n            {status && <div>{status}</div>}\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(Login);\n","import { createBrowserHistory } from \"history\";\n\nexport const history = createBrowserHistory();\n","import Login from \"./containers/LoginContainer\";\n\nexport default Login;\n","import React, { useEffect, useState } from \"react\";\nimport * as Yup from \"yup\";\n\nimport Login from \"../components\";\nimport { ROUTES } from \"../../../constants\";\nimport { history } from \"../../../helpers/history\";\n// import { loginCall } from \"../../../apiCalls\";\n\nconst LoginContainer = ({ currentUser, setUser }) => {\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    if (currentUser) {\n      history.push(ROUTES.home);\n    }\n  }, [currentUser]);\n\n  const initialValues = {\n    username: \"\",\n    password: \"\",\n  };\n\n  const validationSchema = Yup.object().shape({\n    username: Yup.string().required(\"Required\"),\n    password: Yup.string().required(\"Required\"),\n  });\n\n  const login = ({ username, password }, { setSubmitting }) => {\n    setError(\"\");\n    // loginCall(username, password).then(\n    //   (user) => {\n    //     if (user) {\n    setUser(\"kakaka\");\n    history.push(ROUTES.home);\n    //     }\n    //   },\n    //   (error) => {\n    //     setError(JSON.stringify(error));\n    //     setSubmitting(false);\n    //   }\n    // );\n  };\n\n  return (\n    <Login\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      login={login}\n      error={error}\n    />\n  );\n};\n\nexport default LoginContainer;\n","const styles = () => ({\n  wrapper: {\n    padding: 40,\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  link: {\n    cursor: \"pointer\",\n    \"&:hover\": {\n      color: \"#78D5D3\",\n    },\n  },\n});\n\nexport default styles;\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Router, Route } from \"react-router-dom\";\n\nimport PrivateRoute from \"../../../common/PrivateRoute\";\nimport HomePage from \"../../jitsi\";\nimport LoginPage from \"../../login\";\nimport { ROUTES } from \"../../../constants\";\nimport { history } from \"../../../helpers/history\";\nimport styles from \"./styles\";\n\nconst RouterComponent = ({ classes, currentUser, setUser, logout }) => {\n  return (\n    <div className={classes.wrapper}>\n      <Router history={history}>\n        {currentUser && (\n          <a onClick={logout} className={classes.link}>\n            Logout\n          </a>\n        )}\n        <PrivateRoute\n          exact\n          path={ROUTES.home}\n          component={HomePage}\n          currentUser={currentUser}\n        />\n        <Route\n          path={ROUTES.login}\n          component={() => (\n            <LoginPage currentUser={currentUser} setUser={setUser} />\n          )}\n        />\n      </Router>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(RouterComponent);\n","import Router from \"./containers/RouterContainer\";\n\nexport default Router;\n","import React, { useState } from \"react\";\n\nimport Router from \"../components\";\nimport { ROUTES } from \"../../../constants\";\nimport { history } from \"../../../helpers/history\";\n\nconst RouterContainer = () => {\n  const [currentUser, setUser] = useState(\"\");\n\n  const logout = () => {\n    setUser(\"\");\n    history.push(ROUTES.login);\n  };\n\n  return <Router currentUser={currentUser} setUser={setUser} logout={logout} />;\n};\n\nexport default RouterContainer;\n","import React from \"react\";\n\nimport Router from \"./modules/router\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}